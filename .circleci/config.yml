version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8
    working_directory: ~/qliktive-qix-session-service
    environment:
      DOCKER_REPO: qlikea/qliktive-qix-session-service
    steps:
      - checkout
      - restore_cache:
          key: npm-dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command:
            npm install --silent
      - run:
          name: Run ESLint
          command:
            npm run lint
      - run:
          name: Run Unit Tests
          command:
            npm run test:unit
      - save_cache:
          key: npm-dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - setup_remote_docker
      - run:
          name: Update version tag
          command: |
            set -e
            VER=$(node -e "console.log(require('./package.json').version.replace(/-[0-9]+/, '-$CIRCLE_BUILD_NUM'))")
            echo "$VER" > ./version.txt
            if (echo $VER | egrep -- '-[0-9]+$' 1> /dev/null); then
              npm version $VER --no-git-tag-version
            fi
      - run:
          name: Login to Docker
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: Build Docker image
          command: |
            docker build -t $DOCKER_REPO:$(cat ./version.txt) .
      - run:
          name: Spin up a local setup
          command: |
            # Spin up a local setup with the previously built docker image.
            TAG=:$(cat ./version.txt) docker-compose up -d
      - run:
          name: Check that service reaches status healthy
          command: |
            set +e

            # Check that qix-session-service is healthy
            CONTAINER_ID=$(docker ps -aqf "name=qix-session-service")
            echo "Container id is $CONTAINER_ID"

            RETRIES=0
             while [[ "$STATUS" != "healthy" && $RETRIES -le 30 ]]; do
              STATUS=$(docker inspect -f '{{.State.Health.Status}}' "$CONTAINER_ID")
              echo "Container status is $STATUS"
              sleep 2
              RETRIES=$[$RETRIES+1]
            done

            if [[ "$STATUS" != "healthy" ]]; then
              echo "Service did not start up properly"
              exit 1
            fi
      - run:
          name: Verify that a session can be opened
          command: |
            # Find out IP address of the service
            CONTAINER_ID=$(docker ps -aqf "name=qix-session-service")
            GATEWAY_IP_ADDR=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.Gateway}}{{end}}' "$CONTAINER_ID")
            echo "GATEWAY_IP_ADDR=$GATEWAY_IP_ADDR"

            # Open a session through the session service
            docker run --rm byrnedo/alpine-curl http://$GATEWAY_IP_ADDR:9455/v1/session/session-doc -f --header "Authorization: Bearer 123"
      - deploy:
          name: Push image to Docker Hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag $DOCKER_REPO:$(cat ./version.txt) $DOCKER_REPO:latest
            fi
            docker push $DOCKER_REPO
